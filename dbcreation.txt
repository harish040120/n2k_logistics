-- dbcreator.sql (Translated for Microsoft SQL Server / Azure SQL Database)
-- Compatible with the optimized Node.js backend

-- Use the target database (replace 'db_main' if yours is different)
-- USE db_main; -- Uncomment and set if running interactively and not already in the correct DB context
-- GO -- Use GO batch separator if running in SSMS or Azure Data Studio

-- --- Table Creation with IF NOT EXISTS checks ---

-- routes Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[routes]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[routes] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [name] NVARCHAR(100) NOT NULL UNIQUE, -- Increased size slightly, use NVARCHAR
        [description] NVARCHAR(255) NULL
    );
    PRINT 'Table [routes] created.';
END
ELSE
    PRINT 'Table [routes] already exists.';
-- GO

-- terms_of_delivery Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[terms_of_delivery]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[terms_of_delivery] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [name] NVARCHAR(100) NOT NULL UNIQUE -- Use NVARCHAR
    );
     PRINT 'Table [terms_of_delivery] created.';
END
ELSE
    PRINT 'Table [terms_of_delivery] already exists.';
-- GO

-- payment_methods Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[payment_methods]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[payment_methods] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [name] NVARCHAR(100) NOT NULL UNIQUE -- Use NVARCHAR
    );
     PRINT 'Table [payment_methods] created.';
END
ELSE
    PRINT 'Table [payment_methods] already exists.';
-- GO

-- item_types Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[item_types]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[item_types] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [name] NVARCHAR(100) NOT NULL UNIQUE -- Use NVARCHAR
    );
    PRINT 'Table [item_types] created.';
END
ELSE
    PRINT 'Table [item_types] already exists.';
-- GO

-- order_status Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[order_status]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[order_status] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [name] NVARCHAR(50) NOT NULL UNIQUE, -- Use NVARCHAR
        [color] VARCHAR(20) NULL -- For StatusBadge component (VARCHAR likely sufficient)
    );
    PRINT 'Table [order_status] created.';
END
ELSE
    PRINT 'Table [order_status] already exists.';
-- GO

-- orders Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[orders]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[orders] (
        [id] INT IDENTITY(1,1) PRIMARY KEY, -- <<< CRITICAL CHANGE: Use IDENTITY for auto-generated ID
        [lr_number] VARCHAR(50) UNIQUE NOT NULL, -- Unique LR Number generated by app
        [from_name] NVARCHAR(255) NOT NULL,
        [from_address] NVARCHAR(MAX) NOT NULL, -- Use NVARCHAR(MAX) for TEXT equivalent
        [from_district] NVARCHAR(255) NOT NULL,
        [from_phone] VARCHAR(30) NULL, -- Allow NULL? Or ensure it's always provided
        [to_name] NVARCHAR(255) NOT NULL,
        [to_address] NVARCHAR(MAX) NOT NULL,
        [to_district] NVARCHAR(255) NOT NULL,
        [to_phone] VARCHAR(30) NULL, -- Allow NULL?
        [quantity] INT NULL, -- Allow NULL? Backend validation handles required
        [weight] DECIMAL(10, 2) NULL, -- Allow NULL?
        [item_type_id] INT NOT NULL,
        [invoice_number] VARCHAR(50) NULL,
        [invoice_date] DATE NULL,
        [invoice_value] DECIMAL(18, 2) NULL, -- Increased precision to match backend code
        [lr_charge] DECIMAL(10, 2) NULL DEFAULT 0,
        [fright_charge] DECIMAL(10, 2) NULL DEFAULT 0,
        [fuel_surcharge] DECIMAL(10, 2) NULL DEFAULT 0,
        [ie_charge] DECIMAL(10, 2) NULL DEFAULT 0,
        [door_delivery_charge] DECIMAL(10, 2) NULL DEFAULT 0,
        [hamali] DECIMAL(10, 2) NULL DEFAULT 0,
        [route_id] INT NOT NULL,
        [payment_method_id] INT NOT NULL,
        [terms_of_delivery_id] INT NOT NULL,
        [status_id] INT NOT NULL,
        [eway_bill] VARCHAR(20) NULL, -- Allow NULL? Ensure length matches requirements
        [created_at] DATETIME2 DEFAULT GETDATE(), -- Use DATETIME2 and GETDATE()
        [updated_at] DATETIME2 DEFAULT GETDATE(), -- Use DATETIME2 and GETDATE(), app handles updates

        -- Foreign Key Constraints
        CONSTRAINT FK_orders_route FOREIGN KEY ([route_id]) REFERENCES [dbo].[routes](id),
        CONSTRAINT FK_orders_payment_method FOREIGN KEY ([payment_method_id]) REFERENCES [dbo].[payment_methods](id),
        CONSTRAINT FK_orders_terms_of_delivery FOREIGN KEY ([terms_of_delivery_id]) REFERENCES [dbo].[terms_of_delivery](id),
        CONSTRAINT FK_orders_item_type FOREIGN KEY ([item_type_id]) REFERENCES [dbo].[item_types](id),
        CONSTRAINT FK_orders_status FOREIGN KEY ([status_id]) REFERENCES [dbo].[order_status](id)
    );
    PRINT 'Table [orders] created.';
END
ELSE
    PRINT 'Table [orders] already exists.';
-- GO

-- vehicles Table
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[vehicles]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[vehicles] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [name] NVARCHAR(100) NOT NULL, -- Use NVARCHAR
        [max_weight] DECIMAL(10, 2) NOT NULL,
        [max_quantity] INT NOT NULL
    );
    PRINT 'Table [vehicles] created.';
END
ELSE
    PRINT 'Table [vehicles] already exists.';
-- GO

-- --- Insert Sample Data using IF NOT EXISTS checks ---
PRINT 'Inserting sample data...';
-- GO

-- Routes
IF NOT EXISTS (SELECT 1 FROM [dbo].[routes] WHERE name = N'Route A')
    INSERT INTO [dbo].[routes] (name, description) VALUES (N'Route A', N'Salem to Trichy route');
IF NOT EXISTS (SELECT 1 FROM [dbo].[routes] WHERE name = N'Route B')
    INSERT INTO [dbo].[routes] (name, description) VALUES (N'Route B', N'Nambiyur to Erode route');
IF NOT EXISTS (SELECT 1 FROM [dbo].[routes] WHERE name = N'Route C')
    INSERT INTO [dbo].[routes] (name, description) VALUES (N'Route C', N'Trichy to Thanjavur route');
IF NOT EXISTS (SELECT 1 FROM [dbo].[routes] WHERE name = N'Route D')
    INSERT INTO [dbo].[routes] (name, description) VALUES (N'Route D', N'Chennai to Coimbatore route');
IF NOT EXISTS (SELECT 1 FROM [dbo].[routes] WHERE name = N'Route E')
    INSERT INTO [dbo].[routes] (name, description) VALUES (N'Route E', N'Madurai to Tirunelveli route');
IF NOT EXISTS (SELECT 1 FROM [dbo].[routes] WHERE name = N'Route F')
    INSERT INTO [dbo].[routes] (name, description) VALUES (N'Route F', N'Tiruppur to Salem route');
-- GO

-- Payment Methods
IF NOT EXISTS (SELECT 1 FROM [dbo].[payment_methods] WHERE name = N'To Pay')
    INSERT INTO [dbo].[payment_methods] (name) VALUES (N'To Pay');
IF NOT EXISTS (SELECT 1 FROM [dbo].[payment_methods] WHERE name = N'Account')
    INSERT INTO [dbo].[payment_methods] (name) VALUES (N'Account');
IF NOT EXISTS (SELECT 1 FROM [dbo].[payment_methods] WHERE name = N'Paid')
    INSERT INTO [dbo].[payment_methods] (name) VALUES (N'Paid');
-- GO

-- Terms of delivery
IF NOT EXISTS (SELECT 1 FROM [dbo].[terms_of_delivery] WHERE name = N'Door Delivery')
    INSERT INTO [dbo].[terms_of_delivery] (name) VALUES (N'Door Delivery');
IF NOT EXISTS (SELECT 1 FROM [dbo].[terms_of_delivery] WHERE name = N'Office Delivery')
    INSERT INTO [dbo].[terms_of_delivery] (name) VALUES (N'Office Delivery');
-- GO

-- Item Types
IF NOT EXISTS (SELECT 1 FROM [dbo].[item_types] WHERE name = N'Bag')
    INSERT INTO [dbo].[item_types] (name) VALUES (N'Bag');
IF NOT EXISTS (SELECT 1 FROM [dbo].[item_types] WHERE name = N'Box')
    INSERT INTO [dbo].[item_types] (name) VALUES (N'Box');
IF NOT EXISTS (SELECT 1 FROM [dbo].[item_types] WHERE name = N'Barrel')
    INSERT INTO [dbo].[item_types] (name) VALUES (N'Barrel');
IF NOT EXISTS (SELECT 1 FROM [dbo].[item_types] WHERE name = N'Roll')
    INSERT INTO [dbo].[item_types] (name) VALUES (N'Roll');
IF NOT EXISTS (SELECT 1 FROM [dbo].[item_types] WHERE name = N'Bundle')
    INSERT INTO [dbo].[item_types] (name) VALUES (N'Bundle');
-- GO

-- Order Status
IF NOT EXISTS (SELECT 1 FROM [dbo].[order_status] WHERE name = N'Pending')
    INSERT INTO [dbo].[order_status] (name, color) VALUES (N'Pending', 'yellow');
IF NOT EXISTS (SELECT 1 FROM [dbo].[order_status] WHERE name = N'In Transit')
    INSERT INTO [dbo].[order_status] (name, color) VALUES (N'In Transit', 'blue');
IF NOT EXISTS (SELECT 1 FROM [dbo].[order_status] WHERE name = N'Delivered')
    INSERT INTO [dbo].[order_status] (name, color) VALUES (N'Delivered', 'green');
IF NOT EXISTS (SELECT 1 FROM [dbo].[order_status] WHERE name = N'Cancelled')
    INSERT INTO [dbo].[order_status] (name, color) VALUES (N'Cancelled', 'red');
-- GO

-- Vehicles
IF NOT EXISTS (SELECT 1 FROM [dbo].[vehicles] WHERE name = N'Bike')
    INSERT INTO [dbo].[vehicles] (name, max_weight, max_quantity) VALUES (N'Bike', 30, 5);
IF NOT EXISTS (SELECT 1 FROM [dbo].[vehicles] WHERE name = N'Small Van')
    INSERT INTO [dbo].[vehicles] (name, max_weight, max_quantity) VALUES (N'Small Van', 200, 30);
IF NOT EXISTS (SELECT 1 FROM [dbo].[vehicles] WHERE name = N'Medium Truck')
    INSERT INTO [dbo].[vehicles] (name, max_weight, max_quantity) VALUES (N'Medium Truck', 500, 50);
IF NOT EXISTS (SELECT 1 FROM [dbo].[vehicles] WHERE name = N'Large Truck')
    INSERT INTO [dbo].[vehicles] (name, max_weight, max_quantity) VALUES (N'Large Truck', 1000, 100);
-- GO

PRINT 'Sample data insertion check complete.';
-- GO

-- --- Add Indexes using IF NOT EXISTS checks ---
PRINT 'Adding indexes...';
-- GO

-- Indexes for Orders Table
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_created_at' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_created_at ON [dbo].[orders](created_at);
    PRINT 'Index IX_orders_created_at created on [orders].';
END
ELSE PRINT 'Index IX_orders_created_at already exists on [orders].';

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_route_id' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_route_id ON [dbo].[orders](route_id);
    PRINT 'Index IX_orders_route_id created on [orders].';
END
ELSE PRINT 'Index IX_orders_route_id already exists on [orders].';

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_status_id' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_status_id ON [dbo].[orders](status_id);
    PRINT 'Index IX_orders_status_id created on [orders].';
END
ELSE PRINT 'Index IX_orders_status_id already exists on [orders].';

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_payment_method_id' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_payment_method_id ON [dbo].[orders](payment_method_id);
    PRINT 'Index IX_orders_payment_method_id created on [orders].';
END
ELSE PRINT 'Index IX_orders_payment_method_id already exists on [orders].';

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_terms_of_delivery_id' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_terms_of_delivery_id ON [dbo].[orders](terms_of_delivery_id);
    PRINT 'Index IX_orders_terms_of_delivery_id created on [orders].';
END
ELSE PRINT 'Index IX_orders_terms_of_delivery_id already exists on [orders].';

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_item_type_id' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_item_type_id ON [dbo].[orders](item_type_id);
    PRINT 'Index IX_orders_item_type_id created on [orders].';
END
ELSE PRINT 'Index IX_orders_item_type_id already exists on [orders].';

-- Index on lr_number is implicitly created by the UNIQUE constraint, but creating one explicitly doesn't hurt
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_orders_lr_number' AND object_id = OBJECT_ID(N'[dbo].[orders]'))
BEGIN
    CREATE INDEX IX_orders_lr_number ON [dbo].[orders](lr_number);
    PRINT 'Index IX_orders_lr_number created on [orders].';
END
ELSE PRINT 'Index IX_orders_lr_number already exists on [orders].';

-- Indexes for Vehicles Table
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = N'IX_vehicles_capacity' AND object_id = OBJECT_ID(N'[dbo].[vehicles]'))
BEGIN
    CREATE INDEX IX_vehicles_capacity ON [dbo].[vehicles](max_weight, max_quantity);
    PRINT 'Index IX_vehicles_capacity created on [vehicles].';
END
ELSE PRINT 'Index IX_vehicles_capacity already exists on [vehicles].';

-- Note: Indexes on the primary keys are created automatically.
-- Indexes on reference table 'name' columns (like routes.name) are useful if you frequently query those tables directly using WHERE name = ...,
-- but less critical if you only join to them via the FK from the 'orders' table. Add them if needed based on query patterns.

PRINT 'Index creation check complete.';
-- GO

PRINT '--- Database Schema Setup Script End ---';
-- GO